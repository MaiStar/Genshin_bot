### -------------------------------------------------###

# pip install aiogram
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON —Ñ–∞–π–ª (users.json).
# –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ SQLite: –ø—Ä–æ—Å—Ç–∞—è –ë–î –¥–ª—è Telegram –±–æ—Ç–æ–≤.
# –ü—Ä–∏–º–µ—Ä —Å—Ö–µ–º—ã –¥–ª—è SQLite:
# CREATE TABLE users (user_id INTEGER PRIMARY KEY, name TEXT, timezone INTEGER, expedition_end REAL);  # end as unix timestamp
# –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio task –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É).
# –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è production (–ª—É—á—à–µ APScheduler –∏–ª–∏ Celery), –Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ–∫.
# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ offset –æ—Ç UTC –≤ —á–∞—Å–∞—Ö (e.g., 3 –¥–ª—è +3).
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏: –¥–ª–∏–Ω–∞ 1-50, –±–µ–∑ SQL-–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (--, ';', etc.).
# –í—Ä–µ–º—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏: /exp4, /exp8, /exp12, /exp20 ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–µ—Ü –≤ UTC.
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: "–ü—Ä–∏–≤–µ—Ç, [name]! –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –≤ Genshin –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Ä–µ–º—è –ø–æ —Ç–≤–æ–µ–º—É –ø–æ—è—Å—É: [local_time]."

# @BotFather
# GenshinExpedition_bot
# BOT_TOKEN = 'your_token_here'
# python3 -m venv myenv
# source myenv/bin/activate
# deactivate
# pip freeze > requirements.txt
# pip install -r requirements.txt

### -------------------------------------------------###

import time
import asyncio
import logging
import json
import os
from datetime import datetime, timedelta, timezone
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEBUG –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format="%(asctime)s - %(levelname)s - %(message)s",
)

BOT_TOKEN = '8222455312:AAHESEtp3av-tmtLmXNjCZH15sTVI38pe6A'

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

USERS_FILE = "users.json"
os.makedirs(os.path.dirname(USERS_FILE) if os.path.dirname(
    USERS_FILE) else '.', exist_ok=True)

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


users = load_users()
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


class UserStates(StatesGroup):
    waiting_name = State()
    waiting_timezone = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–¥–ª–∏–Ω–∞ –∏ –±–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π)


def validate_name(name: str) -> tuple[bool, str]:
    if not name or len(name.strip()) < 1 or len(name.strip()) > 50:
        return False, "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤."
    safe_name = name.strip()
    dangerous = ["--", ";", "/*", "*/", "union", "select", "drop", "insert"]
    if any(d in safe_name.lower() for d in dangerous):
        return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã."
    return True, safe_name


@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if user_id in users:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {users[user_id]['name']}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /exp4, /exp8, /exp12 –∏–ª–∏ /exp20 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏.")
        return
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è (–¥–ª—è Genshin-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π):')
    await state.set_state(UserStates.waiting_name)


@dp.message(UserStates.waiting_name)
async def process_name(message: Message, state: FSMContext):
    is_valid, result = validate_name(message.text)
    if not is_valid:
        await message.answer(f"–û—à–∏–±–∫–∞: {result}\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(name=result)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (offset –æ—Ç UTC –≤ —á–∞—Å–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –¥–ª—è +3 –∏–ª–∏ -5 –¥–ª—è -5):')
    await state.set_state(UserStates.waiting_timezone)


@dp.message(UserStates.waiting_timezone)
async def process_timezone(message: Message, state: FSMContext):
    try:
        tz_offset = int(message.text)
        if abs(tz_offset) > 12:
            raise ValueError("Offset —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (e.g., 3). {e}")
        return

    data = await state.get_data()
    name = data['name']
    user_id = str(message.from_user.id)
    users[user_id] = {
        'name': name,
        'timezone': tz_offset,
        'expedition_end': None  # UTC timestamp
    }
    save_users(users)
    await state.clear()
    await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–∏–≤–µ—Ç, {name}. –¢–≤–æ–π –ø–æ—è—Å: UTC{tz_offset:+d}.\n"
                         f"–ò—Å–ø–æ–ª—å–∑—É–π /exp4, /exp8, /exp12 –∏–ª–∏ /exp20 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏.")


@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    help_text = """
–ìenshin Expedition Bot:
/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–∏–º—è + –ø–æ—è—Å)
/exp4 ‚Äî —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –Ω–∞ 4 —á–∞—Å–∞
/exp8 ‚Äî –Ω–∞ 8 —á–∞—Å–æ–≤
/exp12 ‚Äî –Ω–∞ 12 —á–∞—Å–æ–≤
/exp20 ‚Äî –Ω–∞ 20 —á–∞—Å–æ–≤
/expstatus ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
–ö–æ–≥–¥–∞ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á—ë—Ç, –±–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç!
    """
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π


async def set_expedition(message: Message, hours: int):
    user_id = str(message.from_user.id)
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å /start!")
        return

    end_utc = datetime.now(timezone.utc) + timedelta(hours=hours)
    users[user_id]['expedition_end'] = end_utc.timestamp()
    save_users(users)

    user_tz = users[user_id]['timezone']
    end_local = end_utc + timedelta(hours=user_tz)
    await message.answer(f"–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {hours} —á–∞—Å–æ–≤!\n"
                         f"–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_local.strftime('%Y-%m-%d %H:%M')} (–ø–æ —Ç–≤–æ–µ–º—É –≤—Ä–µ–º–µ–Ω–∏).\n"
                         f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–µ—Ç–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")


@dp.message(Command(commands=["exp4"]))
async def exp4_handler(message: Message):
    await set_expedition(message, 4)


@dp.message(Command(commands=["exp8"]))
async def exp8_handler(message: Message):
    await set_expedition(message, 8)


@dp.message(Command(commands=["exp12"]))
async def exp12_handler(message: Message):
    await set_expedition(message, 12)


@dp.message(Command(commands=["exp20"]))
async def exp20_handler(message: Message):
    await set_expedition(message, 20)


@dp.message(Command(commands=["expstatus"]))
async def expstatus_handler(message: Message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å /start!")
        return

    end_ts = users[user_id].get('expedition_end')
    if not end_ts:
        await message.answer("–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /exp4 –∏ —Ç.–¥.")
        return

    now_utc = datetime.now(timezone.utc).timestamp()
    remaining = (end_ts - now_utc) / 3600  # hours
    if remaining <= 0:
        await message.answer("–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! (–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–ø–∞–º.)")
    else:
        end_utc = datetime.fromtimestamp(end_ts, tz=timezone.utc)
        user_tz = users[user_id]['timezone']
        end_local = end_utc + timedelta(hours=user_tz)
        await message.answer(f"–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞.\n–û—Å—Ç–∞–ª–æ—Å—å: ~{remaining:.1f} —á–∞—Å–æ–≤.\n–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_local.strftime('%Y-%m-%d %H:%M')} (—Ç–≤–æ—ë –≤—Ä–µ–º—è).")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π


async def check_expeditions():
    while True:
        try:
            now_utc = datetime.now(timezone.utc).timestamp()
            expired_users = []
            for user_id, data in users.items():
                end_ts = data.get('expedition_end')
                if end_ts and now_utc >= end_ts:
                    expired_users.append((user_id, data))

            for user_id, data in expired_users:
                # –ü–æ–ª—É—á–∞–µ–º end_ts –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                end_ts = data['expedition_end']
                name = data['name']
                user_tz = data['timezone']
                end_utc = datetime.fromtimestamp(end_ts, tz=timezone.utc)
                end_local = end_utc + timedelta(hours=user_tz)
                try:
                    await bot.send_message(int(user_id), f"üö® –ü—Ä–∏–≤–µ—Ç, {name}! –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –≤ Genshin –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í—Ä–µ–º—è –ø–æ —Ç–≤–æ–µ–º—É –ø–æ—è—Å—É: {end_local.strftime('%H:%M %d.%m.%Y')}.")
                except Exception as send_e:
                    logging.error(
                        f"Failed to send notification to {user_id}: {send_e}")
                data['expedition_end'] = None  # –°–±—Ä–æ—Å

            if expired_users:
                save_users(users)
                logging.info(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(expired_users)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –Ω–µ –¥–æ–π—Ç–∏).")

            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_expeditions: {e}")
            await asyncio.sleep(60)

# –≠—Ö–æ –¥–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)


@dp.message()
async def send_echo(message: Message):
    await message.reply("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

if __name__ == '__main__':
    async def main():
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(check_expeditions())
        # Polling
        await dp.start_polling(bot)

    asyncio.run(main())
